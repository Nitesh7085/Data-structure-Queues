#include<iostream>
#include<limits.h>
using namespace std;
struct queue{
    int size,capacity,*arr,front,rear;
};

struct queue * createQue(int capacity){
    struct queue *q = (struct queue*)malloc(sizeof(struct queue));
    q->front = q->rear = -1;
    q->size = 0;
    q->arr = (int *)malloc(sizeof(int)*capacity);
    q->capacity = capacity;
    return q;
}

int isFull(struct queue *q){
    return q->capacity == q->size;
}

int isEmpty(struct queue *q){
    return q->size == 0;
}

int front(struct queue *q){
    return q->arr[q->front];
}

int rear(struct queue *q){
    return q->arr[q->rear];
}

int resize(struct queue *q){
    int size = q->capacity;
    q->capacity *= 2;
    q->arr = (int *)realloc(q->arr, sizeof(int)*q->capacity);
    if(q->front > q->rear){
        for(int i=0;i<q->front;i++)
        q->arr[i+size] = q->arr[i];
    }
    q->rear += size;
}

int enqueue(struct queue* q, int data){
    if(isFull(q))
    resize(q);
    if(q->front ==-1)
    q->front += 1;
    q->rear = (q->rear+1)%q->capacity;
    q->size +=1;
    q->arr[q->rear] = data;
}

int dequeue(struct queue *q){
    if(isEmpty(q))
    return 0;
    
    q->size -= 1;
    q->front = (q->front+1)%q->capacity;
}

int deleteQ(struct queue *q){
    if(q)
    if(q->arr)
    free(q->arr);
    free(q);
}

int main(){
    struct queue *q = createQue(5);
    enqueue(q,3);
    enqueue(q,5);
    enqueue(q,7);
    enqueue(q,9);
    enqueue(q,13);
    enqueue(q,23);
    
    cout<<"Front element of the queue: "<<front(q)<<endl;
    cout<<"Rear element of the queue: "<<rear(q)<<endl;
    
    dequeue(q);
    dequeue(q);
    dequeue(q);
    dequeue(q);
    
    enqueue(q,13);
    enqueue(q,15);
    
    cout<<"Front element of the queue: "<<front(q)<<endl;
    cout<<"Rear element of the queue: "<<rear(q)<<endl;
    
    
    deleteQ(q);
}